<?php
declare(strict_types=1);

namespace App\DataFixtures;

use Symfony\Component\DependencyInjection\ContainerInterface as ServiceContainer;

use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;

use Doctrine\Bundle\FixturesBundle\Fixture;

use App\Service\YmlParser;

use App\Entity\Category;

/**
 * Class CategoryFixtures
 *
 * @package App\DataFixtures
 * @author Alexander Saveliev <alex@spbcrew.com>
 */
class CategoryFixtures extends Fixture implements OrderedFixtureInterface
{
    /** @var ServiceContainer */
    private $service_container;

    /** @var YmlParser */
    private $parser;

    /**
     * CategoryFixtures constructor
     *
     * @param ServiceContainer $service_container
     * @param YmlParser $parser
     */
    public function __construct(
        ServiceContainer $service_container,
        YmlParser $parser
    )
    {
        $this->service_container = $service_container;
        $this->parser = $parser;
    }

    /**
     * Load fixtures
     *
     * @param ObjectManager $manager
     * @return void
     * @throws \BadMethodCallException
     */
    public function load(ObjectManager $manager): void
    {
        $now = new \DateTime();

        $file = $this->getFilePath();
        if (!\is_readable($file)) {
            \chmod($file, 644);
        }

        $content = $this->parser->parse(\file_get_contents($file));






        foreach (self::$categories as $categoryList) {
            foreach ($categoryList as $category) {
                $entity = new Category();
                $entity->setTitle($category['title']);
                $entity->setFullTitle($category['full_title'] ?? null);
                $entity->setUri($category['uri']);
                $entity->setIsGeneral($category['is_general']);
                $entity->setEnabled($category['enabled']);
                $entity->setCreated($now);
                $entity->setUpdated($now);
                $entity->setParent($category['parent'] ? $this->getReference($category['parent']) : null);

                $entity->setPortal($this->getReference($category['portal']));

                $manager->persist($entity);

                $this->addReference('category-'.$category['index'], $entity);

                $manager->flush();

                /** @var array $translations */
                $translations = $category['translations'];
                foreach ($translations as $translationName => $targetTranslations) {
                    foreach ($targetTranslations as $locale => $translation) {
                        $setterName = $this->mapping($translationName);

                        if ($setterName) {
                            $setter = 'set'.\ucfirst($setterName);

                            $entity->setTranslatableLocale($locale);
                            $entity->$setter($translation);
                            $manager->persist($entity);
                            $manager->flush();
                        }
                    }
                }
            }
        }
    }

    /**
     * Get fixture order
     *
     * @return int
     */
    public function getOrder(): int
    {
        return 2;
    }

    /**
     * Get path to fixtures file
     *
     * @return string
     */
    private function getFilePath(): string
    {
        return $this->service_container->getParameter('kernel.root_dir').'/DataFixtures/Storage/theories.yml';
    }

    /**
     * Get mapping
     *
     * @param string $key
     * @return string|null
     */
    private function mapping(string $key): ?string
    {
        $mapping = [
            'title' => 'title',
            'full_title' => 'fullTitle'
        ];

        return $mapping[$key] ?? null;
    }
}
