imports:
#  - { resource: 'packages/knp_gaufrette.yaml' }
  - { resource: 'packages/sensio_framework_extra.yaml' }

# Local parameters
  - { resource: 'app/local_parameters.yml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  app_env: '%env(APP_ENV)%'
  app_prefix: '%env(APP_PREFIX)%'
  default_locale: 'en'
  app_locales: [en,es,uk,ru,pl]
  app_piped_locales: en|es|uk|ru|pl
  user_email: '%env(USER_EMAIL)%'
  domain: '%env(DOMAIN)%'
  site_name: '%env(SITE_NAME)%'
  server_ip: '%env(SERVER_IP)%'
  in_developing: true
  github_link: 'https://github.com/rainlike/web.diftong'
  configs_dir: '%kernel.project_dir%/config'
  public_dir: '%kernel.project_dir%/public'

# FOSUser Configuration
# Read the documentation:
# https://packagist.org/packages/friendsofsymfony/user-bundle#dev-master
fos_user:
  db_driver: orm
  firewall_name: main
  user_class: App\Entity\User
  group:
    group_class: App\Entity\UserGroup
  from_email:
    address: '%user_email%'
    sender_name: 'Alexander Saveliev'

# JMSI18nRoutingBundle Configuration
# Read the documentation:
# GitHub: https://github.com/schmittjoh/JMSI18nRoutingBundle
# Packagist: https://packagist.org/packages/jms/i18n-routing-bundle
jms_i18n_routing:
  default_locale: '%default_locale%'
  locales: '%app_locales%'
  strategy: prefix

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Entity,Migrations,Tests}'

  # Subscribers
  #App\Subscriber\HelpfulSubscriber:
  #    $variable: {variable}

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  # Symfony standard services
  sym.finder:
    class: Symfony\Component\Finder\Finder

  # Services
  App\Service\YmlParser:
    autowire: true
    autoconfigure: true

  App\Service\Library:
    autowire: true
    autoconfigure: true

  App\Service\Seo:
    autowire: true
    autoconfigure: true
    arguments:
      $domain: '%domain%'
      $siteName: '%site_name%'

  App\Service\Logotype:
    autowire: true
    autoconfigure: true
    arguments:
      $publicDir: '%public_dir%'
      $siteName: '%site_name%'

  App\Service\LanguageSwitcher:
    autowire: true
    autoconfigure: true

  App\Service\Settings:
    autowire: true
    autoconfigure: true

  App\Service\Transformer:
    autowire: true
    autoconfigure: true

  # Helpers
  App\Helper\TranslationHelper:
    autowire: true
    autoconfigure: true

  # Loggers
  # ...

  # Twig Extensions
  # ...

  # Console Commands
  App\Command\DbRebuild:
    arguments:
      $locales: '%app_locales%'
    tags:
      - { name: 'console.command' }

  App\Command\SettingCheck:
    arguments:
      $locales: '%app_locales%'
    tags:
      - { name: 'console.command' }

  App\Command\SettingSet:
    arguments:
      $locales: '%app_locales%'
    tags:
      - { name: 'console.command' }

  # Vendor Services
  serv.mobile.detect:
    class: Detection\MobileDetect
    shared: false
